// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © infamous5511

//HHLL indicator and STOC MACD adapted from Vitali Apirine

//@version=4
study("Fortech v1", "Fortechv1", false, format.price, 1)

//bgcolor(color.new(#000000,15), title="Dark Background")



buyprimecol = input(title = "Buy Primer Color", type=input.color, defval = color.blue )
sellprimecol  = input(title = "Sell Primer Color", type=input.color, defval = color.yellow )
buytrigcol  = input(title = "Buy Trigger Color", type=input.color, defval = color.lime )
selltrigcol = input(title = "Sell Trigger Color", type=input.color, defval = color.red )

highest(nSeries, iPeriod) => // Overwrites Pine built-in highest() - Highest
    return = nSeries
    for i=0 to max(1, int(iPeriod))-1
        if(nz(nSeries[i]) > return)
            return := nSeries[i]
    return

lowest(nSeries, iPeriod) => // Overwrites Pine built-in lowest() - Lowest
    return = nSeries
    for i=0 to max(1, int(iPeriod))-1
        if(not na(nSeries[i]) and nSeries[i]<return)
            return := nSeries[i]
    return

ema(nSeries, fPeriod) => // Overwrites Pine built-in ema() - Exponential Moving Average - Accepts a float for fPeriod
    alpha = 2.0 / (max(1.0, fPeriod) + 1.0)
    float return = na, return := alpha * nSeries + (1.0 - alpha) * nz(return[1], nSeries)
	return

sma(nSeries, iPeriod) => // Overwrites Pine built-in sma() - Simple Moving Average
    period = max(1, int(iPeriod))
    E = 0.0
    for i=0 to period-1
        E := E + nz(nSeries[i])
    E / period // mean x̄

hhlls(PeriodHigherHighs, PeriodLowerLows, FilterStochastic, FilterPeriod) => // Higher Highs & Lower Lows Stochastics
    highestHigh = highest(high, PeriodHigherHighs)
    highestLow  = highest( low, PeriodHigherHighs)
    lowestHigh  =  lowest(high,   PeriodLowerLows)
    lowestLow   =  lowest( low,   PeriodLowerLows)
    higherHighsNormalized = high>nz(high[1]) ? (high - lowestHigh) / (highestHigh - lowestHigh) : 0.0
    lowerLowsNormalized   =  low<nz( low[1]) ? (highestLow -  low) / (highestLow  -  lowestLow) : 0.0	
    higherHighsStochastic = 100.0 * (FilterStochastic=="EMA" ? ema(higherHighsNormalized, FilterPeriod) : sma(higherHighsNormalized, FilterPeriod))
    lowerLowsStochastic   = 100.0 * (FilterStochastic=="EMA" ? ema(  lowerLowsNormalized, FilterPeriod) : sma(  lowerLowsNormalized, FilterPeriod))
    [higherHighsStochastic, lowerLowsStochastic]

lineThickness     = input(    2,         "------- Line Thickness -------", input.integer, options=[1,2,3])
periodHigherHighs = input(   20,                   "Highest Highs Period", input.integer, minval=2)
periodLowerLows   = input(   20,                     "Lowest Lows Period", input.integer, minval=2)
smoothStochastic  = input(   10,             "  Stochastic Filter Period", input.integer, minval=3)
filterStochastic  = input("EMA",               "  Stochastic Filter Type", input.string , options=["EMA","SMA"])
NULL              = input(false, "======= THRESHOLDS and LEVELS ========") // Just a separator
threshold         = input(   60,                              "Threshold", input.integer, minval= 0, maxval=100, step=2)
overBought        = input(   50,                     "  OverBought Level", input.integer, minval=30, maxval=60)
overSold          = input(   10,                       "  OverSold Level", input.integer, minval= 0, maxval=30)

[HHS, LLS] = hhlls(periodHigherHighs, periodLowerLows, filterStochastic, smoothStochastic)



plot(      HHS/2+20, color=color.lime, title=      "HHS", linewidth=lineThickness)
plot(      LLS/2+20, color=color.red, title=      "LLS", linewidth=lineThickness)	
plot(threshold/2+20, color=#FFFFFFff, title="Threshold", trackprice=true, show_last=1, editable=false)

hline(                   19, color=color.white, editable=false, linewidth=3,title="Indicator splitter")

hline(                   overBought+10, color=#FF0000ff, editable=false, title="OverBought")
hline((overBought + overSold) * 0.5+10, color=#808000ff, editable=false, title=    "Median")
hline(                     overSold+10, color=#00FF00ff, editable=false, title=  "OverSold")


//@version=4

//Settings
maInput = input(title="❓ STMACD MA Type (ENA is default - the rest experimental)", defval="EMA", options=["EMA", "SMA", "VWMA", "WMA"])
Periods = input(45, "Lookback Length")
FastAvgLength = input(12, "Fast MA Length")
SlowAvgLength = input(26, "Slow MA Length")
STMACDLength = input(9, "STMACD Length")
yes0 = input(title="Enable Overbought / Oversold Zones?", type=input.bool, defval=true)
OverBought = input(10, "Overbought Threshold")
OverSold = input(-10, "Oversold Threshold")
yes1 = input(title="Enable Bar Color by Trade?", type=input.bool, defval=true)
yes2 = input(title="Enable Divergence Display?", type=input.bool, defval=true)
plotInput = input(title="❓ Divergence Display: Histogram or Columns", defval="Histogram", options=["Histogram", "Columns"])

//MA selector
getMA(src, length) =>
    ma = 0.0
    if maInput == "EMA"
        ma := ema(src, length)
    if maInput == "SMA"
        ma := sma(src, length)
    if maInput == "VWMA"
        ma := vwma(src, length)
    if maInput == "WMA"
        ma := wma(src, length)
    ma

//STMACD Formula
HHigh = highest(high, Periods)
LLow = lowest(low, Periods)

FastAvgValue = getMA(close, FastAvgLength)
SlowAvgValue = getMA(close, SlowAvgLength)

FastStoch = (FastAvgValue - LLow) / (HHigh - LLow)
SlowStoch = (SlowAvgValue - LLow) / (HHigh - LLow)


STMACD = (FastStoch - SlowStoch) * 100
STMACDAvg = getMA(STMACD, STMACDLength)

//Histogram - Something I added
histogram = STMACD - STMACDAvg
histogramColor = histogram < 0 ? histogram[1] < histogram ? #5900F3 : #ED00FF : histogram > 0 ? histogram[1] < histogram ? #6CDEF1 : #275B6C : color.yellow

//Signal Conditions - Something I added
long = crossover(STMACD, STMACDAvg)
short = crossunder(STMACD, STMACDAvg)

//Plots
plotStyle = plotInput=="Columns" ? plot.style_columns : plot.style_histogram
plot(STMACD, "STMACD", color=color.aqua, transp=0)
plot(STMACDAvg, "STMACD Avg", color=color.orange, transp=15)
plot(yes2 ? histogram : na, "Histogram", color=histogramColor, style = plotStyle, transp=5)
plot(0, "Zero Line", color=color.yellow)

p1 = plot(yes0 ? 20 : na, color=#FF02FF, transp=100)
p2 = plot(yes0 ? -20 : na, color=#FF02FF, transp=100)
p3 = plot(yes0 ? OverBought : na, "OverBought", color=#51CFEE)
p4 = plot(yes0 ? OverSold : na, "OverSold", color=#FF02FF)
fill(p3, p1, color=#51CFEE, transp=80)
fill(p4, p2, color=#770043, transp=80)

//Trade State Bar Coloration - Something I added
//barcolor(yes1 ? barssince(long) > barssince(short) ? #770043 : #51CFEE : na)

bgcolor(color=crossover(STMACD, STMACDAvg) and STMACD < -9.0 ? buyprimecol : na, transp=30) 
bgcolor(color=crossunder(STMACD, STMACDAvg) and STMACD > 9.0 ? sellprimecol : na, transp=30)
bgcolor(color=crossover(HHS, LLS) ? buytrigcol : na, transp=30)
bgcolor(color=crossunder(HHS, LLS) ? selltrigcol : na, transp=30) 

//alertcondition(crossover(HHS,LLS), "HH bullish cross")
//alertcondition(crossunder(HHS,LLS), "LL bearish cross")



ADXShade(value) => 
     value >= 44 ? #FFFFFF : 
     value > 42 ? #D8D8D8 :
     value > 35 ? #B8B8B8 :
     value > 28 ? #989898 : 
     value > 20 ? #303030 :
     #000000         



adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="DI Length")
dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = rma(tr, len)
	plus = fixnan(100 * rma(plusDM, len) / truerange)
	minus = fixnan(100 * rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
plot(sig, color=color.white, title="ADX")

bgcolor(color=ADXShade(sig), transp=65) 
